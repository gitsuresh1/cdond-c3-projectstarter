version: 2.1
orbs:
  slack: circleci/slack@4.5.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy back-end
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1
      - run:
          name: Destroy front-end
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --region us-east-1 \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run: echo "Before inventory file contents" # run the `echo` command        -
      - run: cat .circleci/ansible/inventory.txt # run the `echo` command        -
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text \
              --region us-east-1 >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: echo "after inventory file contents" # run the `echo` command        -
      - run: cat .circleci/ansible/inventory.txt # run the `echo` command        -
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "05:70:10:f4:bf:12:bb:a5:f4:a4:c3:9a:d6:d9:02:8a" ]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run: yum install -y tar gzip
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            cat ~/inventory.txt
            #ansible-playbook -i inventory configure-server.yml    

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend:
       #   requires: [ build-frontend ]
      #- test-frontend:
       #   requires: [build-frontend]
      #- test-backend:
       #   requires: [build-backend]
      #- scan-backend:
       #   requires: [build-backend]
      #- scan-frontend:
       #   requires: [build-frontend]
      - deploy-infrastructure
       #   requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]